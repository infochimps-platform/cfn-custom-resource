module CloudFormation
  module CustomResource
    class BaseHandler
      attr_accessor :data, :request, :status, :reason

      def initialize(req)
        self.request = req
        self.data    = nil
        self.reason  = nil
      end

      def self.mandatory_parameters(*args)
        self.send(:define_method, '_mparams') do
          return args
        end
      end

      def self.optional_parameters(*args)
        self.send(:define_method, '_oparams') do
          return args
        end
      end

      def requestId
        return request['RequestId']
      end

      def physicalId
        return request['PhysicalResourceId'] || @pId
      end

      def physicalId= pId
        @pId = pId
      end

      def logicalId
        return request['LogicalResourceId']
      end

      def stackId
        return request['StackId']
      end

      def _mparams
        return []
      end

      def _oparams
        return []
      end

      def fail!(message)
        self.reason = message
        self.status = "FAILED"
        return false
      end

      def validate!(properties)
        success = true
        message = ""

        missing_mandatory = _mparams - properties.keys
        unknown_params = properties.keys - _mparams - _oparams - ['ServiceToken']

        if missing_mandatory.length > 0
          success = false
          message += "Missing Mandatory Parameters: " + missing_mandatory.join(", ") + "\n"
        end

        if unknown_params.length > 0
          success = false
          message += "Unknown Parameters: " + unknown_params.join(", ") + "\n"
        end

        unless success
          fail! message
        end

        success
      end

      def process_request
        result = true
        case request['RequestType']
        when 'Create'
          result = create(request['ResourceProperties'])
        when 'Delete'
          result = delete(request['ResourceProperties'])
        when 'Update'
          result = update(request['ResourceProperties'],request['OldResourceProperties'])
        else
          fail! "Unknown request type: #{request['RequestType']}"
        end

        if result
          self.status = "SUCCESS"
        else
          self.status = "FAILED"
          self.reason ||= "Failed to process request."
        end

        result
      end

      def to_hash
        { 'Status'             => status,
          'Reason'             => reason,
          'PhysicalResourceId' => physicalId,
          'LogicalResourceId'  => logicalId,
          'StackId'            => stackId,
          'RequestId'          => requestId,
          'Data'               => data
        }.reject {|k,v| v.nil?}
      end
    end

    def send_request!
      response = self.to_hash.to_json

      uri = URI.parse(request['ResponseURL'])
      Net::HTTP.start(uri.host) do |http|
        resp = http.send_request('PUT', uri.request_uri, response.to_json, {'content-type'=>''})
      end
    end
  end
end

class CustomIPACNAME < CustomResource
  mandatory_parameters *%w(Zone RecordName HostName)

  def initialize *args
    super *args
  end

  def kerberos_environment
    { 'KRB5CCNAME' => "/tmp/krb-#{requestId}",
      'KEYTAB'     => "/home/howech/sns/dns.keytab",
      'PRINCIPAL'  => "cfn-dns-resource"
    }
  end

  def with_kerberos_tickets
    result = nil

    begin
      system(kerberos_environment, "kinit -kt $KEYTAB $PRINCIPAL")
      return yield
    rescue Exception => m
      self.reason = m.inspect
      return false
    ensure
      system(kerberos_environment, "kdestroy")
    end
  end

  def ipa_dns_cname_record action, properties
    zone, record, hostname = ['Zone', 'RecordName', 'HostName'].map { |x| properties[x] }
    puts "ipa dnsrecord-#{action} #{zone} #{record} --cname-rec=#{hostname}"
    ENV['KRB5CCNAME'] = kerberos_environment['KRB5CCNAME']
    self.reason = `ipa dnsrecord-#{action} #{zone} #{record} --cname-rec=#{hostname}`
    return $?.to_i == 0
  end

  def create(properties)
    unless validate!(properties)
      return false
    end

    self.physicalId = "cname-#{properties['RecordName']}.#{properties['Zone']}"

    with_kerberos_tickets do
      ipa_dns_cname_record('add', properties)
    end
  end

  def delete(properties)
    unless validate!(properties)
      return false
    end

    # If for some reason a Create request fails, we will eventually
    # be getting a corresponding delete request. One of the ways
    # that a create could fail is if the cname record already exists,
    # in which case, we should not be deleting it.

    # Failed create requests get assigned a physical resource id by
    # cloudformation, and will not look like the physical resource
    # ids generated by a properly created resource.

    # We should only try to delete ipa records if the physical resource id
    # is in the format that we set.

    unless self.physicalId =~ /^cname-/
      return true
    end

    with_kerberos_tickets do
      ipa_dns_cname_record('del', properties)
    end

    # Most likely, any failure was because the record
    # did not exists, so dont pass the failure on.
    true
  end

  def update(new_properties, old_properties)
    unless validate!(new_properties)
      return false
    end

    unless validate!(old_properties)
      return false
    end

    if new_properties['Zone'] == old_properties['Zone']
      with_kerberos_tickets do
        ipa_dns_cname_record('mod', new_properties)
      end
    else
      with_kerberos_tickets do
        ipa_dns_cname_record('del', old_properties)
        ipa_dns_cname_record('add', new_properties)
      end
    end
  end
end
